#include "deps/zlib/zlib.h";
#include <iostream>;
#include "bc_header.h"


#pragma comment(lib, "zlib.lib")


using byte = uint8_t;

int main()
{

    // bc_header -------------------------------------------

    // The data header consists of uint32_t-sized entries:
    // [0] magic number and (internally provided) external reference count
    // [1] version hash
    // [2] source hash
    // [3] flag hash
    // [4] payload length
    // [5] payload checksum
    // ...  serialized payload

    // magic number
    // static constexpr uint32_t kMagicNumber = 0xC0DE0000 ^ ExternalReferenceTable::kSize;  // ExternalReferenceTable::kSize:1051

    //version_hash
    size_t a = hash_value_unsigned<uint32_t>(0x9);
    size_t b = hash_value_unsigned<uint32_t>(0x5);
    size_t c = hash_value_unsigned<uint32_t>(0xac);
    size_t d = hash_value_unsigned<uint32_t>(0x15);
    size_t aa = hash_combine(0, d);
    size_t bb = hash_combine(aa, c);
    size_t cc = hash_combine(bb, b);
    size_t dd = hash_combine(cc, a);
    std::cout << static_cast<uint32_t>(dd) << "\n";

    //flag_hash -> 启动参数的hash  0x3f7e6bc2
    //flag_hash = static_cast<uint32_t>(
    //    base::hash_range(args.c_str(), args.c_str() + args.length()));

    //source_hash 源代码长度 -> `console.log(111111)`.length

    //payload length -> 24 + payload length = 总length

    // payload checksum zlib库计算即可payload内容 0x59075971
    //byte file_payload[] = {0x01, 0x20, 0x53, 0x01, 0x28, 0x07, 0xA8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x10, 0x4C, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x51, 0x61, 0xC2, 0x44, 0xA9, 0x65, 0x07, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6E, 0x73, 0x6F, 0x6C, 0x65, 0x00, 0x01, 0x0C, 0x51, 0x61, 0x96, 0x0F, 0xAE, 0x72, 0x03, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xAD, 0x01, 0x01, 0x10, 0x4B, 0x62, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00, 0x09, 0x20, 0x19, 0x00, 0x0C, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0xC1, 0x2D, 0xF8, 0x01, 0x02, 0xC2, 0x01, 0x0D, 0x07, 0xB2, 0x01, 0x00, 0xC0, 0x5D, 0xF9, 0xF8, 0xF7, 0x04, 0xC3, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x20, 0x52, 0x62, 0x00, 0x00, 0x00, 0x00, 0x44, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x62, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x07, 0x98, 0x61, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x07, 0xB5, 0x08, 0x08, 0x00, 0x01, 0x14, 0x51, 0x63, 0x7A, 0x73, 0x89, 0x2E, 0x17, 0x00, 0x00, 0x00, 0x65, 0x76, 0x61, 0x6C, 0x6D, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x2E, 0x3C, 0x61, 0x6E, 0x6F, 0x6E, 0x79, 0x6D, 0x6F, 0x75, 0x73, 0x3E, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x07, 0x25, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x80, 0x44, 0x5D, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A };
    byte file_payload[] = { 0x01, 0x20, 0x53, 0x01, 0x28, 0x07, 0xa8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x10, 0x4c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x51, 0x61, 0xe6, 0xb1, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0x00, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x00, 0x01, 0x0c, 0x51, 0x61, 0xee, 0x0a, 0x33, 0xe2, 0x03, 0x00, 0x00, 0x00, 0x6c, 0x6f, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xad, 0x01, 0x01, 0x10, 0x4b, 0x62, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00, 0x09, 0x20, 0x19, 0x00, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0xc1, 0x2d, 0xf8, 0x01, 0x02, 0xc2, 0x01, 0x0d, 0x08, 0xb2, 0x01, 0x00, 0xc0, 0x5d, 0xf9, 0xf8, 0xf7, 0x04, 0xc3, 0xa8, 0x00, 0x00, 0x00, 0x01, 0x20, 0x52, 0x62, 0x00, 0x00, 0x00, 0x00, 0x44, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x62, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x07, 0x98, 0x61, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x07, 0xb5, 0x08, 0x08, 0x00, 0x01, 0x14, 0x51, 0x63, 0xde, 0x29, 0x93, 0xfe, 0x17, 0x00, 0x00, 0x00, 0x65, 0x76, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x3c, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x3e, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x44, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x07, 0x25, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x80, 0x44, 0x5d, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a };
    uLong payload_size = sizeof file_payload;
    byte* copy = NewArray<byte>(payload_size);
    CopyBytes(copy, file_payload, 368);
    Vector<const byte> payload = Vector<const byte>(file_payload, payload_size);
    adler32(0, NULL, 0);
    size_t checksum = static_cast<uint32_t>(adler32(0, payload.begin(), payload.length()));
    std::cout << "checksum:" << checksum << "\n";

    // payload ---------------------------------
    // 01



    

}
